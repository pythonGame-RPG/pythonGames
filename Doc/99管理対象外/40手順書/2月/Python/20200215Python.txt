Python作業メモ


■課題
・管理文書のリポジトリをリプレイスする
・RPG構想、ファイル管理→うまいことPython＆Grep機能を使いたい。
・ゲームエンジンUnityの習得→人間が存在するマイクラ。

作れそう？
・ブロックの構造
・敵（アルゴリズム）
・2D
・床の定義
・歩く→上下左右のマスに移動
・体力ゲージ
・RPG町
・クラス情報？csv？JSON？どの形式でもおそらくimport osで可能。

作れなそう＞＜
・グラフィック
・シームレスな切り替え


親知らずがずきずきする


■関数プログラミング
self変数：インスタンス変数の定義→(init:initialize（初期化)の略)
self.[変数名] = [値]

クラス
or3 = Orange(14, "yellow")
コンストラクタにインスタンス生成時Created!を出力させるコマンドがある。

・passで何もしないことをPythonに伝える。
・継承した子クラスでpassを記述すればそのまま親クラスの処理が引き継がれる。

■クラスの利用
class Rectangle:
    def __init__(self, w, l):   # コンストラクタの役割
        self.width = w
        self.len = l
・継承
class Dog:
    def __init__(self, name, breed, owner):
        self.name = name
        self.breed = breed
        self.owner = owner
class Person:
    def __init__(self, name):
        self.name = name

mick = Person("Mick Jagger")
stan = Dog("Stanley", "Bulldog", mick)
print(stan.owner.name) # [犬インスタンス].[owner][飼い主名]

■ポリモーフィズム
・同じインターフェースでありながらデータ型に合わせて異なる動作をする機能

■今日の問題点
・P167クラスの継承で無限ループが発生いろいろ余計なものがあったため。
コンストラクタ内でメソッド呼び出していた。
・・・
I am 20 by 20
I am 20 by 20
I am 20 by 20
Traceback (most recent call last):
  File "myapp5.py", line 133, in <module>
    a_square.print_size()
  File "myapp5.py", line 130, in print_size
    a_square.print_size()
  File "myapp5.py", line 130, in print_size
    a_square.print_size()
  File "myapp5.py", line 130, in print_size
    a_square.print_size()
  [Previous line repeated 992 more times]
  File "myapp5.py", line 127, in print_size
    print("I am {} by {}".format(self.width, self.len))
RecursionError: maximum recursion depth exceeded while calling a Python object

■クラスSquare

class Square:
    def __init__(self, w, l):
        self.weight = w   # これらはインスタンス変数と呼ぶ
        self.length = l
        self.calc = w * l

    def calculate_perimeter(self):
        print("Square = {}".format(self.calc))

squa = Square(20, 30)
squa.calculate_perimeter()→コンソールに表示

・大きさを変えるときは計算結果まで。
def change_size(self, w, l):
        self.weight = w
        self.length = l
        self.calc = w * l

■オーバーライドに注意
# Shapeクラス
class Shape:
    def __init__(self):
        pass

    def what_am_i(self):
        print("I am a Shape")←これを呼びたい場合
        
子クラスでは
# def what_am_i(self):
    #     pass
メソッドはコメント化する必要がある。

■アップロード作業の自動化
NetlifyとGithub

■カードクラス生成