Python作業メモ

■課題
・詳細設計PG
①座標→画像表示
②マップ表示（以下参照「選択座標」のグリッドと「集計座標」(x, y)形式
③ステータス表示（集計座標と同様）
※②，③はゆくゆくはDBから取得することを考慮
DB設計「キャラクタマスタ」張り替え
・ドキュメントルートの問題
→Displayをワークスペースに変更することで解決
→今後オートローダ機能のように動的にインポート（importにファイル名の身を指定）できるよう
にする必要がある。



■スケジュール
・ユーザインターフェースを取り急ぎ
・tortoiseGit実装予定
・pygame.vector
・imoportエラーの対処

■pygame解析

１２．キーボードのボタンを押して離すと、イベントキューにpygame.KEYDOWNイベントとpygame.KEYUPイベントが取得される
→キューは入れた順に取得される（押す→離すの場合、同様にKEYUP→KEYDOWNの順で取得される。）
→event.typeをKEYUP、KEYDOWNで判別すると同時押しなどのイベントを実装可能
１３．pg.display.flip()→display Surface全体を更新して画面に描写する
１４．pygame.display→ウィンドウ画面やスクリーンの制御を行うpygameモジュール
１５．wait_for_keyが曲者っぽい。
１６．Pygameでは、いかなる状況でも一つのdisplayしかアクティブ状態にすることができません
１７．pygame.display.set_mode 命令で新しいdisplayを作成すると、これまで使用していたdisplayは終了して閉じられます。
１８．batch作成
１９．上下押下で選択＆Enterキー押下でデータが選べるようになる
２０．ブログで広告収入？とりあえず進捗報告を毎日あげていこうと思う。
２１.//→商を返す 22 // 8 = 2
２２．文字列 * 5.0→エラーstr * floatは無理
２３．シーケンス→データが並んだデータ型のこと、文字列やリスト、タプルなど
２４．変数に初めて値が入ること→初期化、上書きは上書き
２５．無限ループに入ったら→ctrl + C
２６．TrueやFalseとみなされる値がある。→0,0.0,''など。
２７．for i int range(5):→iが0から4まで、range(12, 16)なども可能。range(0, 10, 2)→0から2ずつ8まで。
２８．import random, sys, os, math　インポート→ただし、sys.random.などの接頭辞を付ける必要あり
２９．from * import tk→モジュール名を省略可能。ただ、読みづらいので普通のimportを使った方が良い
３０.partner_id, is_retire, 拠点_id
３１．変数名を文字列として取得するlocals→ローカル変数の一覧を返す
３２．ランダム生成→setでテキストに出力→insertでlocal変数（変数名）で動的に処理。getで変数を取得
３３．コンボボックスのランダム生成→DBからkey,valueを取得→タプル格納→タプルの参照渡しでランダム選択
３４.目標 import characterDAO as daoで一発取得_OK

必要な処理
・徴兵
・結婚
・拠点変更
・マッチング
・勝敗
・パーティ
・アイテム購入
・日付経過処理（HP回復）
・アイテム購入
・座標変更（マッチング前処理）
・


■ショートカット

■機能概要
・マッチング取り込み前にマッチングを確定させる処理を追加

■■■■■
■■■■■
■■〇■■
■■■■■
■■■■■

縦横３マスに存在するキャラクタがマッチング対象となる
丸のマスを【集計座標】と命名。
集計座標を中心とする縦横５マス集計エリアを【選択座標】と命名。

１２３
４０５
６７８

〇は(x,y)座標でDB登録マッチング対象のピックアップは丸の座標で行う。
同じ座標にオブジェクトが存在しないようにするため〇と１－８の番号は主キーとする。

９マスに属するオブジェクト最大９ブロックでマッチングを行う
→乱数マスタでマッチング対象から除外される

★ブレイクで保持するキー項目
処理対象日-陣営id-パーティid-カルマ値

キャラクタマスタから全件取得して集計座標で回す。

パーティは全員がリーダーと同じ集計座標に存在すること。


■wordpressクソ
Simple Custom CSS and JS 使えない→Simple Custom CSS and JS Pro（有料）じゃないとダメ。
ビジネスに変更
→latexを使用
[latex]y_{i}= \frac{\exp^x_{i}} {\sum_{i=1}^{n}\exp^x_{i}}[/latex]
ソフトマックス関数を書きたいがこれでよいのだろうか？

latexクリア
・上限、下限がSUMの上下でなく右に表示されてしまう件\limits記載で解決goo参照facebook登録

キャッチ画像
・photoshopでクリア、レイア―効果がかなり役に立つ、レイア―効果（境界で白ふちを作成、ドロップシャドウで見やすさ）
・イラレは画像インポート→画像保存をすると、新規作成したシートの余白がある場合保存時に余白が存在してしまう（画像を保存するわけではないので）

・ソースコードsyntax highlightをクリア

・CSS→h③のみリボンを追加、SEO対策はheadlineをキーワードにするとよい







■課題

・クラスレベル実装、クラススキル実装→いつか
・ストレス集計、ヘイト→GDP減少、敗北時、クーデター時
・登録ボタン→チェック項目
　geneあり→特になし
　geneなし→gene_name必須チェック
　必須チェック→name,race,

→複数登録はexecutemanyで登録、DBアクセスを減らそう
・種族進化実装→rece_id、親コードを設定する。最終進化は親コード0



main.pyの課題
未起票の乱数生成コメントあり

■メモ
・優先順位はLEVELUP、BATTLE、
・create characterはsignupで可能。sub_characterの取得はテイム、ガチャなど。
・ガチャとは別にcreate characterが可能。ランダム生成、アイテムを所持している場合は使用して作成が可能。
・spriteに要素を追加する（ステータス）
・LEVELUPはgenes,charactersを結合バッチ
・コンボボックスの項目→汎用マスタから名称、コード取得？
・geneコンボ→遺伝子マスタ　作成中
・raceコンボ→種族マスタ　作成中
・コンボボックスにkeyを設定できない件。valueからキーを導き出すしかない。あるいはvalueでデータ取得
・valueに入るのは名称→
・デスクトップでテーブルの作成：5.995s
→遅いのでなんとかしたい。
・データありDb作成13.301s→14.271sおっそ。
→遅すぎPC買うレベル
戦争が始まる→firldsマスタのみではフィールド拡張割譲などの処理が厳しいかもしれない。
【前提】人はみなどこかの国に属している→カリスマを持った人間が先導し戦争が起こる
→戦場の設定、戦争後の土地の移動（すべてというわけではない）
→土地には土地の地質、水量、肥沃さ、天候などがある。その土地に生息する生物は環境に適応する必要がある
→これらをfieldsで扱うのは土台無理な話。
→天気の移り変わりはDBでは扱えない、処理で行う必要がある。
→それ以外の地質など固定の環境は設定可能と思われる。
・これらを加味してfieldsにひつような要素は
・広範囲を扱うことが難しいので100X100でとりあえず10000データの作成？つまるところこれが世界の広さ（狭いな）→最大２５万人の世界
・フィールドマスタ（国）→ロケーションマスタ（地方）→スポットマスタ（拠点）
→フィールド→クーデター、戦争などに対応→１年ごとに集計
→ロケーション→集計座標、戦争、地方のブロック単位。このマスの所有者は領主となる。ギルドフラグetcキャラに恩恵を与える。→１月ごとに集計
→スポット→戦闘マス５×５マスで戦闘処理、→１日ごとに集計
→18.172s/12TBL作成！おそい！
→20.557/12TBL
→21.673/12TBL
→23.328/12TBL


■進捗
・gitでadobe系、office手順書をリポジトリから除外（ローカルには保持）
・終了時、



■次回
→

