Python作業メモ



■pygame解析


必要な処理
・徴兵
・結婚
・拠点変更
・マッチング
・勝敗
・パーティ
・アイテム購入
・日付経過処理（HP回復）
・アイテム購入
・座標変更（マッチング前処理）
・


■ショートカット



■課題

・クラスレベル実装、クラススキル実装→いつか
・ストレス集計、ヘイト→GDP減少、敗北時、クーデター時
・登録ボタン→チェック項目
　geneあり→特になし
　geneなし→gene_name必須チェック
　必須チェック→name,race,

→複数登録はexecutemanyで登録、DBアクセスを減らそう
・種族進化実装→rece_id、親コードを設定する。最終進化は親コード0

→with recursive～　種族は再帰SQLを使用－完了済み

課題①：種族作成ボックス作成 OK

課題②：拠点選択→レベルで判別、国についても言及、同名ロケーションの表現
課題③：キャラクタ登録→課題④、クラス
課題④：名前の取得→クローリング＆スクレイピング
課題⑤：





main.pyの課題
未起票の乱数生成コメントあり

■メモ
5/16
from logging import getLogger, StreamHandler, DEBUG
logger = getLogger(__name__)
handler = StreamHandler()
handler.setLevel(DEBUG)
logger.setLevel(DEBUG)
logger.addHandler(handler)
logger.propagate = False

↓スクレイピング用モジュール
from urllib.request import urlopen
from bs4 import BeautifulSoup



処理ログ出力確認用おまじない
なろうのスクレイピング成功→保存時にデータの形式を変更可能




戦争が始まる→firldsマスタのみではフィールド拡張割譲などの処理が厳しいかもしれない。
【前提】人はみなどこかの国に属している→カリスマを持った人間が先導し戦争が起こる
→戦場の設定、戦争後の土地の移動（すべてというわけではない）
→土地には土地の地質、水量、肥沃さ、天候などがある。その土地に生息する生物は環境に適応する必要がある
→これらをfieldsで扱うのは土台無理な話。
→天気の移り変わりはDBでは扱えない、処理で行う必要がある。
→それ以外の地質など固定の環境は設定可能と思われる。
・これらを加味してfieldsにひつような要素は
・広範囲を扱うことが難しいので100X100でとりあえず10000データの作成？つまるところこれが世界の広さ（狭いな）→最大２５万人の世界
・フィールドマスタ（国）→ロケーションマスタ（地方）→スポットマスタ（拠点）
→フィールド→クーデター、戦争などに対応→１年ごとに集計
→ロケーション→集計座標、戦争、地方のブロック単位。このマスの所有者は領主となる。ギルドフラグetcキャラに恩恵を与える。→１月ごとに集計
→スポット→戦闘マス５×５マスで戦闘処理、→１日ごとに集計
→18.172s/12TBL作成！おそい！
→20.557/12TBL
→21.673/12TBL
→23.328/12TBL


■進捗
・gitでadobe系、office手順書をリポジトリから除外（ローカルには保持）
・終了時、



■次回
→

