Python作業メモ


■エラー


■ショートカット


■課題

→複数登録はexecutemanyで登録、DBアクセスを減らそう
・種族進化実装→rece_id、親コードを設定する。最終進化は親コード0

→with recursive～　種族は再帰SQLを使用－完了済み

※選択可能種族はすでに存在する進化先を選べないようにする必要あり
※選択後再びSelectしているので無駄にDB負荷がかかってしまっている（ぶっちゃツリーデータで取得済みなので必要ない）
※

→Insert：進化先（コンボボックスの値が存在しない場合→Insert中断）
　→Insertの場合進化先は存在しないので、最終進化として登録する
　→名前、ランク被りは重複エラーとする→登録チェックを実装（課題⑦）
→Update：進化前（コンボボックス有りの場合→Update)　NGコンボボックス選択後
　※Updateの場合ほかのツリーも予期せず更新してしまう可能性がある（仕様通り）
　


2020/06/29 SQL詳細は次回


課題⑧：
・子種族のアップデートどうする→Insertしたデータのrace_idを取得して子種族のparent_idに格納する
→Insertの戻り値を取得したい

課題⑨：
種族のコーパス作成があまりに面倒くさい→スクレイピングを活用したい
→種族とそうでないものの区別に難ありというか不可能
→人による判断が必要
→ごっそり取得して残りを削除フラグ１に設定
→HPで種族とそうでないものを判別。ライキンで言うところの認証チェック？
→来場者を増やす仕組みが必要：ブログ
→漢字とカタカナを取得

課題⑩：
数百件程度であれば自力で作ることも可能
geneランクによって進化可能な種族を判定する仕組みも必要

課題⑪：
r_rankとtotalの関連性
rank = 'G'

        if total > 50000:
            rank = 'SSS'
        elif total > 20000:
            rank = 'SS'
        elif total > 10000:
            rank = 'S'
        elif total > 5000:
            rank = 'A'
        elif total > 2000:
            rank = 'B'
        elif total > 1000:
            rank = 'C'
        elif total > 500:
            rank = 'D'
        elif total > 200:
            rank = 'F'
            　　　　　　　　OK



課題⑫：OK
ランダム生成→進化は進化前より下のランクに設定されないため、ランダムは条件を付与する必要がある
→例えばランダムで生成したtotal値が想定を上回らなかった場合、重みを微量付与して再実行する＋＋以下の工程をループ
→アプリベース

課題⑬：OK
race選択時に右側のテキストに何を設定するのか
→テキストに表示する値をself.raにするとランダム生成連打で元の値からどんどん上昇してしまう
→テキスト表示はentry_raceに設定し解決
→選択時はentryにself.raを設定する

課題⑭：
ラベルに選択したraceのステータスを表示したいが表示されない


■メモ
・種族作成画面
→クラスRaceTree
→ホームを選択で最初の種族
→複数の進化元がある場合→種族の重複を防ぐ必要があるコンボボックス
★実装

③ツリーが多対多（進化元、進化先複数なので）ツリー上で重複しないように表示することは可能なのかどうか？
→iidをうまく使えば可能なのでは？→NG（現状維持）

次回→コンボボックスの中身から

ex.
①アングロサクソン→ヒューマン
②ホモサピエンス→ヒューマン
の場合
①は新規登録race_name, 進化LEVEL,上昇値（手動orランダム）の入力
②は更新コンボボックスから進化先を選択して登録（手動)

何に生かせるか
→シミュレーションでデータ扱いは理解可能、
→〇どの媒体で行うか
→〇何のために行うか
→〇どうしてここまで地道になってしまったか
→〇ポートフォリオのため→金払いのいいところに出来栄えを見せる


■進捗06/22
・ツリービュー部、スプレッド部
→ツリー作成

■次回
・内部イベント作成

